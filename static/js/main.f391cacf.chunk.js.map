{"version":3,"sources":["components/App.tsx","components/Cell.tsx","components/Board.tsx","components/Pause.tsx","components/GlobalStyles.ts","index.tsx"],"names":["DIRECTION","Container","styled","div","props","head","snake","fruit","Cell","boardSize","Board","snakePosition","fruitPosition","useState","cells","setCells","useEffect","cellsCreated","i","push","j","console","log","map","line","e","forEach","pos","index","Header","h1","Background","Pause","message","GlobalStyle","createGlobalStyle","initialSnakePos","initialFruitPos","Score","Input","input","App","setSnake","setFruit","pause","setPause","setBoardSize","boardSizeInput","setBoardSizeInput","gameOver","setGameOver","UP","direction","setDirection","score","useRef","time","ref","useSwipeable","onSwiped","onSwipedUp","DOWN","onSwipedDown","onSwipedLeft","RIGHT","LEFT","onSwipedRight","preventDefaultTouchmoveEvent","document","makeNewSnake","newSnake","length","ceil","JSON","stringify","fruitPos","current","random","Math","floor","pop","setDirectionListener","key","setPauseFalse","target","HTMLInputElement","clearGameOver","handleBoardSizeChange","value","parseInt","window","addEventListener","removeEventListener","clearTimeout","setTimeout","type","onChange","path","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.f391cacf.chunk.js","sourcesContent":["import { FC, RefCallback, useEffect, useRef, useState } from 'react';\r\nimport Board from './Board';\r\nimport Pause from './Pause';\r\nimport GlobalStyle from './GlobalStyles';\r\nimport styled from 'styled-components';\r\nimport { useSwipeable } from 'react-swipeable';\r\n\r\nenum DIRECTION {\r\n  UP,\r\n  DOWN,\r\n  LEFT,\r\n  RIGHT,\r\n}\r\n\r\nconst initialSnakePos = [\r\n  [4, 4],\r\n  [4, 4],\r\n  [4, 4],\r\n];\r\n\r\nconst initialFruitPos = [3, 3];\r\n\r\nconst Score = styled.h1`\r\n  font-weight: 500;\r\n  font-size: 5vw;\r\n  position: absolute;\r\n  top: 23vw;\r\n  width: 100%;\r\n  text-align: center;\r\n\r\n  @media (min-width: 500px) {\r\n    top: 10vw;\r\n    font-size: 4vw;\r\n  }\r\n\r\n  @media (min-width: 800px) {\r\n    top: 2vw;\r\n    font-size: 2vw;\r\n  }\r\n`;\r\n\r\nconst Input = styled.input`\r\n  font-size: 5vw;\r\n  position: absolute;\r\n  top: 43vw;\r\n  width: 40%;\r\n  text-align: center;\r\n  background-color: rgba(255, 255, 255, 0.1);\r\n  border: none;\r\n  margin-left: 50%;\r\n  transform: translateX(-50%);\r\n  color: var(--color-white);\r\n\r\n  :focus {\r\n    outline: none;\r\n    border: 1px solid var(--color-white);\r\n  }\r\n\r\n  @media (min-width: 500px) {\r\n    top: 20vw;\r\n    font-size: 4vw;\r\n    width: 25%;\r\n  }\r\n\r\n  @media (min-width: 800px) {\r\n    top: 10vw;\r\n    font-size: 2vw;\r\n    width: 20%;\r\n  }\r\n`;\r\n\r\nconst App: FC = (): JSX.Element => {\r\n  const [snake, setSnake] = useState(initialSnakePos);\r\n  const [fruit, setFruit] = useState(initialFruitPos);\r\n  const [pause, setPause] = useState(true);\r\n  const [boardSize, setBoardSize] = useState(10);\r\n  const [boardSizeInput, setBoardSizeInput] = useState('10');\r\n  const [gameOver, setGameOver] = useState(false);\r\n  const [direction, setDirection] = useState(DIRECTION.UP);\r\n  const score = useRef(0);\r\n  const time = useRef<NodeJS.Timeout>();\r\n\r\n  const { ref } = useSwipeable({\r\n    onSwiped: () => {\r\n      setPause(false);\r\n      setGameOver(false);\r\n    },\r\n    onSwipedUp: () =>\r\n      direction !== DIRECTION.DOWN && setDirection(DIRECTION.UP),\r\n    onSwipedDown: () =>\r\n      direction !== DIRECTION.UP && setDirection(DIRECTION.DOWN),\r\n    onSwipedLeft: () =>\r\n      direction !== DIRECTION.RIGHT && setDirection(DIRECTION.LEFT),\r\n    onSwipedRight: () =>\r\n      direction !== DIRECTION.LEFT && setDirection(DIRECTION.RIGHT),\r\n    preventDefaultTouchmoveEvent: true,\r\n  }) as { ref: RefCallback<Document> };\r\n\r\n  useEffect(() => {\r\n    ref(document);\r\n  });\r\n\r\n  const makeNewSnake = () => {\r\n    const newSnake: number[][] = [];\r\n\r\n    if (newSnake.length === 0) {\r\n      switch (direction) {\r\n        case DIRECTION.RIGHT:\r\n          newSnake.push([snake[0][0], snake[0][1] + 1]);\r\n          break;\r\n        case DIRECTION.LEFT:\r\n          newSnake.push([snake[0][0], snake[0][1] - 1]);\r\n          break;\r\n        case DIRECTION.UP:\r\n          newSnake.push([snake[0][0] - 1, snake[0][1]]);\r\n          break;\r\n        case DIRECTION.DOWN:\r\n          newSnake.push([snake[0][0] + 1, snake[0][1]]);\r\n          break;\r\n      }\r\n    }\r\n\r\n    newSnake.forEach(pos => {\r\n      if (pos[0] === -1 || pos[0] === boardSize) setGameOver(true);\r\n      else if (pos[1] === -1 || pos[1] === boardSize) setGameOver(true);\r\n    });\r\n\r\n    snake.forEach(ceil => {\r\n      newSnake.push(ceil);\r\n    });\r\n\r\n    for (let i = 1; i < newSnake.length; i++) {\r\n      if (JSON.stringify(newSnake[i]) === JSON.stringify(newSnake[0])) {\r\n        setGameOver(true);\r\n      }\r\n    }\r\n\r\n    if (newSnake[0][0] === fruit[0] && newSnake[0][1] === fruit[1]) {\r\n      let fruitPos: number[] = [];\r\n      score.current++;\r\n      let random = false;\r\n\r\n      while (!random) {\r\n        fruitPos = [\r\n          Math.floor(Math.random() * boardSize),\r\n          Math.floor(Math.random() * boardSize),\r\n        ];\r\n        random = true;\r\n\r\n        for (let i = 0; i < newSnake.length; i++) {\r\n          if (JSON.stringify(newSnake[i]) === JSON.stringify(fruitPos)) {\r\n            random = false;\r\n          }\r\n        }\r\n      }\r\n\r\n      setFruit(fruitPos);\r\n    } else newSnake.pop();\r\n\r\n    setSnake(newSnake);\r\n  };\r\n\r\n  const setDirectionListener = (e: KeyboardEvent) => {\r\n    if (e.key === 'ArrowUp' && direction !== DIRECTION.DOWN)\r\n      setDirection(DIRECTION.UP);\r\n    else if (e.key === 'ArrowDown' && direction !== DIRECTION.UP)\r\n      setDirection(DIRECTION.DOWN);\r\n    else if (e.key === 'ArrowLeft' && direction !== DIRECTION.RIGHT)\r\n      setDirection(DIRECTION.LEFT);\r\n    else if (e.key === 'ArrowRight' && direction !== DIRECTION.LEFT)\r\n      setDirection(DIRECTION.RIGHT);\r\n  };\r\n\r\n  const setPauseFalse = (e: KeyboardEvent) => {\r\n    if (!(e.target instanceof HTMLInputElement) || e.key === 'Enter')\r\n      setPause(false);\r\n  };\r\n\r\n  const clearGameOver = (e: KeyboardEvent) => {\r\n    if (!(e.target instanceof HTMLInputElement) || e.key === 'Enter') {\r\n      setGameOver(false);\r\n      score.current = 0;\r\n    }\r\n  };\r\n\r\n  const handleBoardSizeChange = (\r\n    e: React.ChangeEvent<HTMLInputElement>\r\n  ): void => {\r\n    setBoardSizeInput(e.target.value);\r\n    const value = e.target.value !== '' ? parseInt(e.target.value) : 0;\r\n    if (value >= 5 && value <= 50) {\r\n      setBoardSize(value);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!pause && !gameOver)\r\n      window.addEventListener('keydown', setDirectionListener);\r\n\r\n    if (pause) window.addEventListener('keydown', setPauseFalse);\r\n\r\n    makeNewSnake();\r\n\r\n    if (gameOver) {\r\n      setSnake(initialSnakePos);\r\n      setFruit(initialFruitPos);\r\n      setDirection(DIRECTION.UP);\r\n      window.addEventListener('keydown', clearGameOver);\r\n    }\r\n\r\n    return () => {\r\n      window.removeEventListener('keydown', setDirectionListener);\r\n\r\n      window.removeEventListener('keydown', setPauseFalse);\r\n\r\n      window.removeEventListener('keydown', clearGameOver);\r\n    };\r\n  }, [direction, pause, gameOver]);\r\n\r\n  useEffect(() => {\r\n    time.current && clearTimeout(time.current);\r\n\r\n    if (!pause && !gameOver) time.current = setTimeout(makeNewSnake, 200);\r\n  }, [snake, direction, pause, makeNewSnake, gameOver]);\r\n\r\n  return (\r\n    <>\r\n      <GlobalStyle />\r\n      <Score>Score: {score.current}</Score>\r\n      <Board\r\n        snakePosition={snake}\r\n        fruitPosition={fruit}\r\n        boardSize={boardSize}\r\n      />\r\n      {pause && (\r\n        <>\r\n          <Pause message=\"Press any button to start\" />\r\n          <Input\r\n            type=\"number\"\r\n            value={boardSizeInput}\r\n            onChange={handleBoardSizeChange}\r\n          />\r\n        </>\r\n      )}\r\n      {gameOver && (\r\n        <>\r\n          <Pause\r\n            message={`Game Over\r\n        Score: ${score.current}\r\n      `}\r\n          />\r\n          <Input\r\n            type=\"number\"\r\n            value={boardSizeInput}\r\n            onChange={handleBoardSizeChange}\r\n          />\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { FC } from 'react';\r\nimport styled from 'styled-components';\r\n\r\ninterface CellProps {\r\n  snake: boolean;\r\n  head: boolean;\r\n  fruit: boolean;\r\n}\r\n\r\nconst Container = styled.div<CellProps>`\r\n  background-color: ${props =>\r\n    props.head\r\n      ? 'var(--color-head)'\r\n      : props.snake\r\n      ? 'var(--color-snake)'\r\n      : props.fruit\r\n      ? 'var(--color-fruit)'\r\n      : 'transparent'};\r\n`;\r\n\r\nconst Cell: FC<CellProps> = (props): JSX.Element => {\r\n  return <Container {...props}></Container>;\r\n};\r\n\r\nexport default Cell;\r\n","import { FC, useEffect, useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport Cell from './Cell';\r\n\r\nconst Container = styled.div<{ boardSize: number }>`\r\n  width: 80vw;\r\n  height: 80vw;\r\n  margin-left: 50%;\r\n  margin-top: 30%;\r\n  transform: translateY(-50%);\r\n  transform: translateX(-50%);\r\n  display: grid;\r\n  grid-template-columns: ${props => `repeat(${props.boardSize}, 1fr)`};\r\n\r\n  border: 1px solid var(--color-white);\r\n\r\n  @media (min-width: 500px) {\r\n    width: 50vw;\r\n    height: 50vw;\r\n    margin-top: 15%;\r\n  }\r\n\r\n  @media (min-width: 800px) {\r\n    width: 40vw;\r\n    height: 40vw;\r\n    margin-top: 5%;\r\n  }\r\n`;\r\n\r\ninterface BoardProps {\r\n  snakePosition: number[][];\r\n  fruitPosition: number[];\r\n  boardSize: number;\r\n}\r\n\r\ntype CellsType = { snake: boolean; fruit: boolean; head: boolean }[][];\r\n\r\nconst Board: FC<BoardProps> = ({\r\n  snakePosition,\r\n  fruitPosition,\r\n  boardSize,\r\n}): JSX.Element => {\r\n  const [cells, setCells] = useState<CellsType>([[]]);\r\n\r\n  useEffect(() => {\r\n    let cellsCreated: CellsType = [];\r\n    for (let i = 0; i < boardSize; i++) {\r\n      cellsCreated.push([]);\r\n\r\n      for (let j = 0; j < boardSize; j++) {\r\n        cellsCreated[i].push({ snake: false, fruit: false, head: false });\r\n      }\r\n    }\r\n\r\n    console.log(cellsCreated);\r\n\r\n    setCells(cellsCreated);\r\n  }, [boardSize]);\r\n\r\n  const renderCells = (): JSX.Element[][] => {\r\n    return cells.map((line, i) => {\r\n      return line.map((e, j) => {\r\n        let snake = false;\r\n        let head = false;\r\n        let fruit = false;\r\n        snakePosition.forEach((pos, index) => {\r\n          if (pos[0] === i && pos[1] === j) {\r\n            snake = true;\r\n            if (index === 0) head = true;\r\n          }\r\n        });\r\n\r\n        if (fruitPosition[0] === i && fruitPosition[1] === j) fruit = true;\r\n\r\n        const props = { snake, head, fruit };\r\n\r\n        return <Cell key={`${i}${j}`} {...props} />;\r\n      });\r\n    });\r\n  };\r\n\r\n  return <Container boardSize={boardSize}>{renderCells()}</Container>;\r\n};\r\n\r\nexport default Board;\r\n","import { FC } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Header = styled.h1`\r\n  font-weight: 500;\r\n  font-size: 6vw;\r\n  letter-spacing: 2px;\r\n  text-transform: uppercase;\r\n  position: absolute;\r\n  left: 50%;\r\n  top: 30%;\r\n  text-align: center;\r\n  transform: translateX(-50%);\r\n`;\r\n\r\nconst Background = styled.div`\r\n  background-color: rgba(0, 0, 0, 0.6);\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100vw;\r\n  height: 100%;\r\n`;\r\n\r\nconst Pause: FC<{ message: string }> = ({ message }): JSX.Element => {\r\n  return (\r\n    <Background>\r\n      <Header>{message}</Header>\r\n    </Background>\r\n  );\r\n};\r\n\r\nexport default Pause;\r\n","import { createGlobalStyle } from 'styled-components';\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  *,\r\n  *::after,\r\n  *::before {\r\n    margin: 0;\r\n    padding: 0;\r\n    box-sizing: inherit;\r\n    transition: all .2s ease;\r\n  }\r\n\r\n  body {\r\n    margin: 0;\r\n    padding: 0;\r\n    font-size: 1.6rem;\r\n    font-family: Roboto;\r\n    box-sizing: border-box;\r\n    background-color: #131313;\r\n    color: #eAeAeA;\r\n\r\n    transition: all .2s ease;\r\n  }\r\n\r\n  html {\r\n    font-size: 62.5%;\r\n  }\r\n\r\n\r\n  :root {\r\n    // COLORS\r\n    --color-snake: #6734eb;\r\n    --color-head: #190059;\r\n    --color-fruit: #e3144f;\r\n    --color-black: #131313;\r\n    --color-white: #eAeAeA;\r\n\r\n    // TRANSITIONS\r\n    --trans-default: all .2s ease;\r\n    \r\n    // SHADOWS\r\n    --shadow-default: 0px 5px 30px 2px rgba(0, 0, 0, 0.2);\r\n  }\r\n`;\r\n\r\nexport default GlobalStyle;\r\n","import ReactDOM from 'react-dom';\r\n\r\nimport App from './components/App';\r\n\r\nconst path = document.getElementById('root') as HTMLElement;\r\n\r\nReactDOM.render(<App />, path);\r\n"],"sourceRoot":""}