{"version":3,"sources":["components/Board.tsx","Constants.ts","components/Cell.tsx","components/App.tsx","components/Pause.tsx","components/GlobalStyles.ts","index.tsx"],"names":["BOARD_SIZE","Container","styled","div","props","head","snake","fruit","Cell","cells","i","push","j","DIRECTION","Board","snakePosition","fruitPosition","map","line","e","forEach","pos","index","Header","h1","Background","Pause","message","GlobalStyle","createGlobalStyle","initialSnakePos","initialFruitPos","Score","App","useState","setSnake","setFruit","pause","setPause","gameOver","setGameOver","UP","direction","setDirection","score","useRef","time","makeNewSnake","newSnake","length","RIGHT","LEFT","DOWN","ceil","JSON","stringify","fruitPos","current","random","Math","floor","pop","setDirectionListener","key","setPauseFalse","clearGameOver","useEffect","window","addEventListener","removeEventListener","clearTimeout","setTimeout","path","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.5a73aa25.chunk.js","sourcesContent":["import { FC } from 'react';\r\nimport styled from 'styled-components';\r\nimport { BOARD_SIZE } from '../Constants';\r\nimport Cell from './Cell';\r\n\r\nconst Container = styled.div`\r\n  width: 80vw;\r\n  height: 80vw;\r\n  margin-left: 50%;\r\n  margin-top: 30%;\r\n  transform: translateY(-50%);\r\n  transform: translateX(-50%);\r\n  display: grid;\r\n  grid-template-columns: ${props => `repeat(${BOARD_SIZE}, 1fr)`};\r\n\r\n  border: 1px solid var(--color-white);\r\n\r\n  @media (min-width: 500px) {\r\n    width: 50vw;\r\n    height: 50vw;\r\n    margin-top: 15%;\r\n  }\r\n\r\n  @media (min-width: 800px) {\r\n    width: 40vw;\r\n    height: 40vw;\r\n    margin-top: 5%;\r\n  }\r\n`;\r\n\r\nlet cells: { snake: boolean }[][] = [];\r\nfor (let i = 0; i < BOARD_SIZE; i++) {\r\n  cells.push([]);\r\n\r\n  for (let j = 0; j < BOARD_SIZE; j++) {\r\n    cells[i].push({ snake: false });\r\n  }\r\n}\r\n\r\ninterface BoardProps {\r\n  snakePosition: number[][];\r\n  fruitPosition: number[];\r\n}\r\n\r\nconst Board: FC<BoardProps> = ({\r\n  snakePosition,\r\n  fruitPosition,\r\n}): JSX.Element => {\r\n  const renderCells = (): JSX.Element[][] => {\r\n    return cells.map((line, i) => {\r\n      return line.map((e, j) => {\r\n        let snake = false;\r\n        let head = false;\r\n        let fruit = false;\r\n        snakePosition.forEach((pos, index) => {\r\n          if (pos[0] === i && pos[1] === j) {\r\n            snake = true;\r\n            if (index === 0) head = true;\r\n          }\r\n        });\r\n\r\n        if (fruitPosition[0] === i && fruitPosition[1] === j) fruit = true;\r\n\r\n        const props = { snake, head, fruit };\r\n\r\n        return <Cell key={`${i}${j}`} {...props} />;\r\n      });\r\n    });\r\n  };\r\n\r\n  return <Container>{renderCells()}</Container>;\r\n};\r\n\r\nexport default Board;\r\n","export const BOARD_SIZE = 10;\r\n","import { FC } from 'react';\r\nimport styled from 'styled-components';\r\n\r\ninterface CellProps {\r\n  snake: boolean;\r\n  head: boolean;\r\n  fruit: boolean;\r\n}\r\n\r\nconst Container = styled.div<CellProps>`\r\n  background-color: ${props =>\r\n    props.head\r\n      ? 'var(--color-head)'\r\n      : props.snake\r\n      ? 'var(--color-snake)'\r\n      : props.fruit\r\n      ? 'var(--color-fruit)'\r\n      : 'transparent'};\r\n`;\r\n\r\nconst Cell: FC<CellProps> = (props): JSX.Element => {\r\n  return <Container {...props}></Container>;\r\n};\r\n\r\nexport default Cell;\r\n","import { FC, useEffect, useRef, useState } from 'react';\r\nimport Board from './Board';\r\nimport Pause from './Pause';\r\nimport GlobalStyle from './GlobalStyles';\r\nimport { BOARD_SIZE } from '../Constants';\r\nimport styled from 'styled-components';\r\n\r\nenum DIRECTION {\r\n  UP,\r\n  DOWN,\r\n  LEFT,\r\n  RIGHT,\r\n}\r\n\r\nconst initialSnakePos = [\r\n  [4, 4],\r\n  [4, 4],\r\n  [4, 4],\r\n];\r\n\r\nconst initialFruitPos = [3, 3];\r\n\r\nconst Score = styled.h1`\r\n  font-weight: 500;\r\n  font-size: 2vw;\r\n  position: absolute;\r\n  top: 25vw;\r\n  width: 100%;\r\n  text-align: center;\r\n\r\n  @media (min-width: 500px) {\r\n    top: 11vw;\r\n  }\r\n\r\n  @media (min-width: 800px) {\r\n    top: 2vw;\r\n  }\r\n`;\r\n\r\nconst App: FC = (): JSX.Element => {\r\n  const [snake, setSnake] = useState(initialSnakePos);\r\n  const [fruit, setFruit] = useState(initialFruitPos);\r\n  const [pause, setPause] = useState(true);\r\n  const [gameOver, setGameOver] = useState(false);\r\n  const [direction, setDirection] = useState(DIRECTION.UP);\r\n  const score = useRef(0);\r\n  const time = useRef<NodeJS.Timeout>();\r\n\r\n  const makeNewSnake = () => {\r\n    const newSnake: number[][] = [];\r\n\r\n    if (newSnake.length === 0) {\r\n      switch (direction) {\r\n        case DIRECTION.RIGHT:\r\n          newSnake.push([snake[0][0], snake[0][1] + 1]);\r\n          break;\r\n        case DIRECTION.LEFT:\r\n          newSnake.push([snake[0][0], snake[0][1] - 1]);\r\n          break;\r\n        case DIRECTION.UP:\r\n          newSnake.push([snake[0][0] - 1, snake[0][1]]);\r\n          break;\r\n        case DIRECTION.DOWN:\r\n          newSnake.push([snake[0][0] + 1, snake[0][1]]);\r\n          break;\r\n      }\r\n    }\r\n\r\n    newSnake.forEach(pos => {\r\n      if (pos[0] === -1 || pos[0] === BOARD_SIZE) setGameOver(true);\r\n      else if (pos[1] === -1 || pos[1] === BOARD_SIZE) setGameOver(true);\r\n    });\r\n\r\n    snake.forEach(ceil => {\r\n      newSnake.push(ceil);\r\n    });\r\n\r\n    for (let i = 1; i < newSnake.length; i++) {\r\n      if (JSON.stringify(newSnake[i]) === JSON.stringify(newSnake[0])) {\r\n        setGameOver(true);\r\n      }\r\n    }\r\n\r\n    if (newSnake[0][0] === fruit[0] && newSnake[0][1] === fruit[1]) {\r\n      let fruitPos: number[] = [];\r\n      score.current++;\r\n      let random = false;\r\n\r\n      while (!random) {\r\n        fruitPos = [\r\n          Math.floor(Math.random() * BOARD_SIZE),\r\n          Math.floor(Math.random() * BOARD_SIZE),\r\n        ];\r\n        random = true;\r\n\r\n        for (let i = 0; i < newSnake.length; i++) {\r\n          if (JSON.stringify(newSnake[i]) === JSON.stringify(fruitPos)) {\r\n            random = false;\r\n          }\r\n        }\r\n      }\r\n\r\n      setFruit(fruitPos);\r\n    } else newSnake.pop();\r\n\r\n    setSnake(newSnake);\r\n  };\r\n\r\n  const setDirectionListener = (e: KeyboardEvent) => {\r\n    if (e.key === 'ArrowUp' && direction !== DIRECTION.DOWN)\r\n      setDirection(DIRECTION.UP);\r\n    else if (e.key === 'ArrowDown' && direction !== DIRECTION.UP)\r\n      setDirection(DIRECTION.DOWN);\r\n    else if (e.key === 'ArrowLeft' && direction !== DIRECTION.RIGHT)\r\n      setDirection(DIRECTION.LEFT);\r\n    else if (e.key === 'ArrowRight' && direction !== DIRECTION.LEFT)\r\n      setDirection(DIRECTION.RIGHT);\r\n  };\r\n\r\n  const setPauseFalse = () => {\r\n    setPause(false);\r\n  };\r\n\r\n  const clearGameOver = () => {\r\n    setGameOver(false);\r\n    score.current = 0;\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!pause && !gameOver)\r\n      window.addEventListener('keydown', setDirectionListener);\r\n\r\n    if (pause) window.addEventListener('keydown', setPauseFalse);\r\n\r\n    makeNewSnake();\r\n\r\n    if (gameOver) {\r\n      setSnake(initialSnakePos);\r\n      setFruit(initialFruitPos);\r\n      setDirection(DIRECTION.UP);\r\n      window.addEventListener('keydown', clearGameOver);\r\n    }\r\n\r\n    return () => {\r\n      window.removeEventListener('keydown', setDirectionListener);\r\n\r\n      window.removeEventListener('keydown', setPauseFalse);\r\n\r\n      window.removeEventListener('keydown', clearGameOver);\r\n    };\r\n  }, [direction, pause, gameOver]);\r\n\r\n  useEffect(() => {\r\n    time.current && clearTimeout(time.current);\r\n\r\n    if (!pause && !gameOver) time.current = setTimeout(makeNewSnake, 200);\r\n  }, [snake, direction, pause, makeNewSnake, gameOver]);\r\n\r\n  return (\r\n    <>\r\n      <GlobalStyle />\r\n      <Score>Score: {score.current}</Score>\r\n      <Board snakePosition={snake} fruitPosition={fruit} />\r\n      {pause && <Pause message=\"Press any button to start\" />}\r\n      {gameOver && (\r\n        <Pause\r\n          message={`Game Over\r\n        Score: ${score.current}\r\n      `}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { FC } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Header = styled.h1`\r\n  font-weight: 500;\r\n  font-size: 6vw;\r\n  letter-spacing: 2px;\r\n  text-transform: uppercase;\r\n  position: absolute;\r\n  left: 50%;\r\n  top: 30%;\r\n  text-align: center;\r\n  transform: translateX(-50%);\r\n`;\r\n\r\nconst Background = styled.div`\r\n  background-color: rgba(0, 0, 0, 0.6);\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100vw;\r\n  height: 100%;\r\n`;\r\n\r\nconst Pause: FC<{ message: string }> = ({ message }): JSX.Element => {\r\n  return (\r\n    <Background>\r\n      <Header>{message}</Header>\r\n    </Background>\r\n  );\r\n};\r\n\r\nexport default Pause;\r\n","import { createGlobalStyle } from 'styled-components';\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  *,\r\n  *::after,\r\n  *::before {\r\n    margin: 0;\r\n    padding: 0;\r\n    box-sizing: inherit;\r\n    transition: all .2s ease;\r\n  }\r\n\r\n  body {\r\n    margin: 0;\r\n    padding: 0;\r\n    font-size: 1.6rem;\r\n    font-family: Roboto;\r\n    box-sizing: border-box;\r\n    background-color: #131313;\r\n    color: #eAeAeA;\r\n\r\n    transition: all .2s ease;\r\n  }\r\n\r\n  html {\r\n    font-size: 62.5%;\r\n  }\r\n\r\n\r\n  :root {\r\n    // COLORS\r\n    --color-snake: #6734eb;\r\n    --color-head: #190059;\r\n    --color-fruit: #e3144f;\r\n    --color-black: #131313;\r\n    --color-white: #eAeAeA;\r\n\r\n    // TRANSITIONS\r\n    --trans-default: all .2s ease;\r\n    \r\n    // SHADOWS\r\n    --shadow-default: 0px 5px 30px 2px rgba(0, 0, 0, 0.2);\r\n  }\r\n`;\r\n\r\nexport default GlobalStyle;\r\n","import ReactDOM from 'react-dom';\r\n\r\nimport App from './components/App';\r\n\r\nconst path = document.getElementById('root') as HTMLElement;\r\n\r\nReactDOM.render(<App />, path);\r\n"],"sourceRoot":""}